# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/renesas_sdk.gni")

import("${chip_root}/src/platform/device.gni")

declare_args() {
  renesas_sdk_verbose = false
  _sdk_debug = 0

  # Matter DAC in the DER format.
  matter_dac = "${chip_root}/credentials/test/attestation/Chip-Test-DAC-FFF2-8002-0010-Cert.der"

  # Matter DAC EC key in the DER format.
  matter_dac_key = "${chip_root}/credentials/test/attestation/Chip-Test-DAC-FFF2-8002-0010-Key.der"

  # Matter PAI certificate in the DER format.
  matter_pai = "${chip_root}/credentials/test/attestation/Chip-Test-PAI-FFF2-NoPID-Cert.der"

  # Matter Certification Declaration in the DER format.
  matter_cd = "${chip_root}/credentials/test/certification-declaration/Chip-Test-CD-FFF2-8001-8002.der"
}

template("renesas_sdk") {
  config("${target_name}_config") {
    include_dirs = []
    defines = []
    libs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    include_dirs += [
  
    ]

    cflags = [ "--specs=nano.specs" ]
    if (is_debug) {
      cflags += [ "-Wno-unused" ]
    }

    ldflags = [
      "--specs=nano.specs",
      "-nostartfiles",
    ]
  }

  source_set(target_name) {
    sources = [
      
    ]

    if (chip_enable_ota_requestor) {
      sources += [
   
      ]
    }

    #sources += get_target_outputs(":${target_name}_gen_lib_installer")

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    defines = [
      "CHIP_HAVE_CONFIG_H=1",
      "CHIP_SYSTEM_CONFIG_USE_LWIP=1"
    ]

    public_configs = [ ":${target_name}_config" ]

    deps = [ ]
  }
}

